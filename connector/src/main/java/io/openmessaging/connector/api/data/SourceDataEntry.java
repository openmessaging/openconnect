/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package io.openmessaging.connector.api.data;

import java.nio.ByteBuffer;
import java.util.Objects;

import io.openmessaging.connector.api.header.Headers;

/**
 * SourceDataEntries are generated by SourceTasks and passed to specific message queue to store.
 *
 * @version OMS 0.1.0
 * @since OMS 0.1.0
 */
public class SourceDataEntry extends DataEntry {
    /**
     * Partition of the data source.
     */
    private ByteBuffer sourcePartition;

    /**
     * Position of current data entry of {@link SourceDataEntry#sourcePartition}.
     */
    private ByteBuffer sourcePosition;

    public SourceDataEntry(ByteBuffer sourcePartition,
        ByteBuffer sourcePosition,
        Long timestamp,
        String queueName,
        String shardingKey,
        EntryType entryType,
        MetaAndData key,
        MetaAndData value,
        Headers headers) {
        super(timestamp, queueName, shardingKey, entryType, key, value, headers);
        this.sourcePartition = sourcePartition;
        this.sourcePosition = sourcePosition;
    }

    public SourceDataEntry(ByteBuffer sourcePartition,
        ByteBuffer sourcePosition,
        String queueName,
        String shardingKey,
        EntryType entryType,
        MetaAndData value,
        Headers headers) {
        this(sourcePartition, sourcePosition, null,
            queueName, shardingKey, entryType,
            null, value, headers);
    }

    public SourceDataEntry(ByteBuffer sourcePartition,
        ByteBuffer sourcePosition,
        String queueName,
        String shardingKey,
        EntryType entryType,
        MetaAndData value) {
        this(sourcePartition, sourcePosition, null,
            queueName, shardingKey, entryType,
            null, value, null);
    }

    public SourceDataEntry(ByteBuffer sourcePartition,
        ByteBuffer sourcePosition,
        String queueName,
        EntryType entryType,
        MetaAndData value) {
        this(sourcePartition, sourcePosition, null,
            queueName, null, entryType,
            null, value, null);
    }

    public SourceDataEntry(ByteBuffer sourcePartition,
        ByteBuffer sourcePosition,
        String queueName,
        EntryType entryType,
        MetaAndData key,
        MetaAndData value) {
        this(sourcePartition, sourcePosition, null,
            queueName, null, entryType,
            key, value, null);
    }

    public SourceDataEntry(ByteBuffer sourcePartition,
        ByteBuffer sourcePosition,
        String queueName,
        String shardingKey,
        EntryType entryType,
        MetaAndData key,
        MetaAndData value) {
        this(sourcePartition, sourcePosition, null,
            queueName, shardingKey, entryType,
            key, value, null);
    }

    public SourceDataEntry(ByteBuffer sourcePartition,
        ByteBuffer sourcePosition,
        Long timestamp,
        String queueName,
        String shardingKey,
        EntryType entryType,
        MetaAndData key,
        MetaAndData value) {
        this(sourcePartition, sourcePosition, timestamp,
            queueName, shardingKey, entryType,
            key, value, null);
    }

    public SourceDataEntry newDataEntry(
        Long timestamp,
        String queueName,
        String shardingKey,
        EntryType entryType,
        MetaAndData key,
        MetaAndData value) {
        return new SourceDataEntry(this.sourcePartition, this.sourcePosition,
            timestamp, queueName, shardingKey, entryType, key, value, getHeaders().duplicate());
    }

    public SourceDataEntry newDataEntry(
        Long timestamp,
        String queueName,
        String shardingKey,
        EntryType entryType,
        MetaAndData key,
        MetaAndData value,
        Headers headers) {
        return new SourceDataEntry(this.sourcePartition, this.sourcePosition,
            timestamp, queueName, shardingKey, entryType, key, value, headers);
    }

    public ByteBuffer getSourcePartition() {
        return sourcePartition;
    }

    public void setSourcePartition(ByteBuffer sourcePartition) {
        this.sourcePartition = sourcePartition;
    }

    public ByteBuffer getSourcePosition() {
        return sourcePosition;
    }

    public void setSourcePosition(ByteBuffer sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        if (!super.equals(o)) {
            return false;
        }

        SourceDataEntry that = (SourceDataEntry)o;

        return Objects.equals(this.sourcePartition, that.sourcePartition) &&
            Objects.equals(this.sourcePosition, that.sourcePosition);
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (this.sourcePartition != null ? this.sourcePartition.hashCode() : 0);
        result = 31 * result + (this.sourcePosition != null ? this.sourcePosition.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "SourceDataEntry{" +
            "sourcePartition=" + this.sourcePartition +
            ", sourcePosition=" + this.sourcePosition +
            "} " + super.toString();
    }
}
